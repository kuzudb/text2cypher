============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/prrao/code/text2cypher
configfile: pyproject.toml
collected 30 items

tests/test_text2cypher_json.py ......F...................F...            [100%]

=================================== FAILURES ===================================
____________________________ test_suite_1a_json[q6] ____________________________

q = {'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x1016f56a0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1016f56a0>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Comment', 'properties': [... 'to': 'Tag', 'properties': []}, {'label': 'commentIsLocatedIn', 'from': 'Comment', 'to': 'Place', 'properties': []}]}"
test_cases = [{'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'India'} in result set() for question: What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?
E             Cypher query: MATCH (p1:Person)-[:commentHasCreator]->(c1:Comment)-[:replyOfPost]->(p2:Post)-[:postHasTag]->(t1:Tag), (c1)-[:commentIsLocatedIn]->(p3:Place) WHERE p1.ID = 17592186048023 AND toLower(t1.name) CONTAINS toLower('Jamaica') RETURN p3.name
E           assert {'India'} <= set()
E             
E             Extra items in the left set:
E             'India'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Comment', 'properties': []}, {'label': 'Post', 'properties': []}, {'label': 'Tag', 'properties': [{'name': 'name', 'type': 'STRING'}]}, {'label': 'Place', 'properties': [{'name': 'name', 'type': 'STRING'}]}], 'edges': [{'label': 'commentHasCreator', 'from_': 'Comment', 'to': 'Person', 'properties': []}, {'label': 'replyOfPost', 'from_': 'Comment', 'to': 'Post', 'properties': []}, {'label': 'postHasTag', 'from_': 'Post', 'to': 'Tag', 'properties': []}, {'label': 'commentIsLocatedIn', 'from_': 'Comment', 'to': 'Place', 'properties': []}]}
____________________________ test_suite_1c_json[q6] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102a81550>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q], expected_boolean=True)

tests/test_text2cypher_json.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102a81550>
schema = "{'nodes': [{'label': 'Forum', 'properties': []}, {'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}...: 'Forum', 'to': 'Tag', 'properties': []}, {'label': 'hasMember', 'from': 'Forum', 'to': 'Person', 'properties': []}]}"
test_cases = [{'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Are there any forums with the tag that person ID 10995116287854 is a member of?
E             Cypher query: MATCH (p1:Person {ID: 10995116287854})-[:hasMember]->(f1:Forum)-[:forumHasTag]->(t1:Tag) RETURN t1.name
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Forum', 'properties': []}, {'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Tag', 'properties': []}], 'edges': [{'label': 'forumHasTag', 'from_': 'Forum', 'to': 'Tag', 'properties': []}, {'label': 'hasMember', 'from_': 'Forum', 'to': 'Person', 'properties': []}]}
=========================== short test summary info ============================
FAILED tests/test_text2cypher_json.py::test_suite_1a_json[q6] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1c_json[q6] - AssertionErro...
=================== 2 failed, 28 passed in 90.58s (0:01:30) ====================

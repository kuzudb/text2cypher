============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/prrao/code/text2cypher
configfile: pyproject.toml
collected 30 items

tests/test_text2cypher_xml_full.py ..F.........F........F........        [100%]

=================================== FAILURES ===================================
____________________________ test_suite_1a_xml[q2] _____________________________

q = {'expected_values': ['Mads', 'Haugland', 'Norwegian_School_of_Sport_Sciences'], 'question': 'What is the first/last name of the person who created post ID 962077547172, and where did they study?'}
db_manager = <utils.KuzuDatabaseManager object at 0x105c72fd0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x105c72fd0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Mads', 'Haugland', 'Norwegian_School_of_Sport_Sciences'], 'question': 'What is the first/last name of the person who created post ID 962077547172, and where did they study?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Mads', 'Haugland', 'Norwegian_School_of_Sport_Sciences'} in result set() for question: What is the first/last name of the person who created post ID 962077547172, and where did they study?
E             Cypher query: MATCH (p1:Post)-[:postHasCreator]->(per:Person) WHERE toString(p1.ID) CONTAINS '962077547172' MATCH (per)-[:studyAt]->(org:Organisation) RETURN per.firstName, per.lastName, org.name
E           assert {'Haugland', ...ort_Sciences'} <= set()
E             
E             Extra items in the left set:
E             'Mads'
E             'Haugland'
E             'Norwegian_School_of_Sport_Sciences'

tests/test_text2cypher_xml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Catalog exception: function TOSTRING does not exist.
____________________________ test_suite_1b_xml[q2] _____________________________

q = {'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x10628d9b0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10628d9b0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {2293} in result set() for question: What is the total number of persons who liked comments created by "Rafael Alonso"?
E             Cypher query: MATCH (p1:Person)-[:commentHasCreator]->(c1:Comment)<-[:likeComment]-(p2:Person) WHERE toLower(p1.firstName) + ' ' + toLower(p1.lastName) CONTAINS toLower('rafael alonso') RETURN count(DISTINCT p2.ID)
E           assert {2293} <= set()
E             
E             Extra items in the left set:
E             2293

tests/test_text2cypher_xml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Binder exception: Cannot match a built-in function for given function +(STRING,BOOL). Supported inputs are
(INT128,INT128) -> INT128
(INT64,INT64) -> INT64
(INT32,INT32) -> INT32
(INT16,INT16) -> INT16
(INT8,INT8) -> INT8
(SERIAL,SERIAL) -> SERIAL
(UINT64,UINT64) -> UINT64
(UINT32,UINT32) -> UINT32
(UINT16,UINT16) -> UINT16
(UINT8,UINT8) -> UINT8
(DOUBLE,DOUBLE) -> DOUBLE
(FLOAT,FLOAT) -> FLOAT
(DECIMAL,DECIMAL) -> DECIMAL
(LIST,LIST) -> LIST
(STRING,STRING) -> STRING
(INTERVAL,INTERVAL) -> INTERVAL
(DATE,INT64) -> DATE
(INT64,DATE) -> DATE
(DATE,INTERVAL) -> DATE
(INTERVAL,DATE) -> DATE
(TIMESTAMP,INTERVAL) -> TIMESTAMP
(INTERVAL,TIMESTAMP) -> TIMESTAMP

____________________________ test_suite_1c_xml[q1] _____________________________

q = {'expected_values': ['Yes'], 'question': 'Did anyone who works at "Linxair" create a comment that replied to a post?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1061bdeb0>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q], expected_boolean=True)

tests/test_text2cypher_xml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1061bdeb0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Yes'], 'question': 'Did anyone who works at "Linxair" create a comment that replied to a post?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Did anyone who works at "Linxair" create a comment that replied to a post?
E             Cypher query: MATCH (o:Organisation)<-[:workAt]-(p:Person), (p)<-[:commentHasCreator]-(c:Comment)-[:replyOfPost]->(po:Post) WHERE toLower(o.name) CONTAINS toLower('Linxair') RETURN COUNT(c) > 0 AS exists
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_xml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Parser exception: mismatched input 'exists' expecting {ADD, ALTER, AS, ATTACH, BEGIN, BY, CALL, CHECKPOINT, COMMENT, COMMIT, CONTAINS, COPY, COUNT, CYCLE, DATABASE, DELETE, DETACH, DROP, EXPLAIN, EXPORT, EXTENSION, FROM, FORCE, GRAPH, IMPORT, IF, INCREMENT, IS, KEY, LIMIT, LOAD, LOGICAL, MATCH, MAXVALUE, MERGE, MINVALUE, NO, NODE, PROJECT, READ, REL, RENAME, RETURN, ROLLBACK, SEQUENCE, SET, START, STRUCT, TO, TRANSACTION, TYPE, UNINSTALL, UPDATE, USE, WRITE, YIELD, DECIMAL, L_SKIP, HexLetter, UnescapedSymbolicName, EscapedSymbolicName} (line: 1, offset: 183)
"MATCH (o:Organisation)<-[:workAt]-(p:Person), (p)<-[:commentHasCreator]-(c:Comment)-[:replyOfPost]->(po:Post) WHERE toLower(o.name) CONTAINS toLower('Linxair') RETURN COUNT(c) > 0 AS exists"
                                                                                                                                                                                        ^^^^^^
=========================== short test summary info ============================
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q2] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1b_xml[q2] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1c_xml[q1] - AssertionE...
======================== 3 failed, 27 passed in 55.82s =========================

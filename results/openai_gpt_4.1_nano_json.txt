============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/prrao/code/text2cypher
configfile: pyproject.toml
collected 30 items

tests/test_text2cypher_json.py ......FF....F.F.FF...FF.F...F.            [100%]

=================================== FAILURES ===================================
____________________________ test_suite_1a_json[q6] ____________________________

q = {'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x103c656a0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103c656a0>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Comment', 'properties': [... 'to': 'Tag', 'properties': []}, {'label': 'commentIsLocatedIn', 'from': 'Comment', 'to': 'Place', 'properties': []}]}"
test_cases = [{'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'India'} in result set() for question: What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?
E             Cypher query: MATCH (p:Person {ID: 17592186048023})<-[:commentHasCreator]-(c:Comment)-[:replyOfPost]->(post:Post)-[:postHasTag]->(tag:Tag {name: 'Jamaica'})<-[:commentIsLocatedIn]-(c2:Comment)-[:commentHasCreator]->(p2:Person)-[:commentIsLocatedIn]->(place:Place) RETURN DISTINCT place.name
E           assert {'India'} <= set()
E             
E             Extra items in the left set:
E             'India'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Comment', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Post', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Tag', 'properties': [{'name': 'name', 'type': 'STRING'}]}, {'label': 'Place', 'properties': [{'name': 'name', 'type': 'STRING'}]}], 'edges': [{'label': 'commentHasCreator', 'from_': 'Comment', 'to': 'Person', 'properties': []}, {'label': 'replyOfPost', 'from_': 'Comment', 'to': 'Post', 'properties': []}, {'label': 'postHasTag', 'from_': 'Post', 'to': 'Tag', 'properties': []}, {'label': 'commentIsLocatedIn', 'from_': 'Comment', 'to': 'Place', 'properties': []}]}
____________________________ test_suite_1a_json[q7] ____________________________

q = {'expected_values': [13194139534410], 'question': 'What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103c657b0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103c657b0>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}, {'name': 'birthday', 'type': 'DATE'}]}...title', 'type': 'STRING'}]}], 'edges': [{'label': 'hasModerator', 'from': 'Forum', 'to': 'Person', 'properties': []}]}"
test_cases = [{'expected_values': [13194139534410], 'question': 'What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {13194139534410} in result set() for question: What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?
E             Cypher query: MATCH (p:Person)-[:hasModerator]->(f:Forum) WHERE toLower(p.ID) IS NOT NULL AND p.birthday > date('1990-01-01') AND toLower(f.title) CONTAINS 'emilio fernandez' RETURN DISTINCT p.ID
E           assert {13194139534410} <= set()
E             
E             Extra items in the left set:
E             13194139534410

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}, {'name': 'birthday', 'type': 'DATE'}]}, {'label': 'Forum', 'properties': [{'name': 'title', 'type': 'STRING'}]}], 'edges': [{'label': 'hasModerator', 'from_': 'Forum', 'to': 'Person', 'properties': []}]}
____________________________ test_suite_1b_json[q2] ____________________________

q = {'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103d3ecf0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103d3ecf0>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}, {'name': 'firstName', 'type': 'STRING'...l': 'likeComment', 'from': 'Person', 'to': 'Comment', 'properties': [{'name': 'creationDate', 'type': 'TIMESTAMP'}]}]}"
test_cases = [{'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {2293} in result {0} for question: What is the total number of persons who liked comments created by "Rafael Alonso"?
E             Cypher query: MATCH (p1:Person)-[:commentHasCreator]->(c:Comment)<-[:likeComment]-(p2:Person) WHERE toLower(p1.firstName) CONTAINS 'rafael' AND toLower(p1.lastName) CONTAINS 'alonso' RETURN COUNT(DISTINCT p2) AS totalPersons
E           assert {2293} <= {0}
E             
E             Extra items in the left set:
E             2293

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}, {'name': 'firstName', 'type': 'STRING'}, {'name': 'lastName', 'type': 'STRING'}]}, {'label': 'Comment', 'properties': [{'name': 'ID', 'type': 'INT64'}]}], 'edges': [{'label': 'commentHasCreator', 'from_': 'Comment', 'to': 'Person', 'properties': []}, {'label': 'likeComment', 'from_': 'Person', 'to': 'Comment', 'properties': [{'name': 'creationDate', 'type': 'TIMESTAMP'}]}]}
____________________________ test_suite_1b_json[q4] ____________________________

q = {'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}
db_manager = <utils.KuzuDatabaseManager object at 0x103d332b0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103d332b0>
schema = "{'nodes': [{'label': 'Forum', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Person', 'properties': [{'...m', 'to': 'Person', 'properties': []}, {'label': 'workAt', 'from': 'Person', 'to': 'Organisation', 'properties': []}]}"
test_cases = [{'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {278} in result set() for question: What is the total number of forums moderated by employees of "Air_Tanzania"?.
E             Cypher query: MATCH (org:Organisation)-[:name]->(name) WHERE toLower(name) CONTAINS 'air_tanzania' MATCH (p:Person)-[:workAt]->(org) MATCH (f:Forum)-[:hasModerator]->(p) RETURN count(DISTINCT f) AS total_forums
E           assert {278} <= set()
E             
E             Extra items in the left set:
E             278

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Forum', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'properties': [{'name': 'name', 'type': 'STRING'}, {'name': 'ID', 'type': 'INT64'}]}], 'edges': [{'label': 'hasModerator', 'from_': 'Forum', 'to': 'Person', 'properties': []}, {'label': 'workAt', 'from_': 'Person', 'to': 'Organisation', 'properties': []}]}
Error running query: Binder exception: Table name does not exist.
____________________________ test_suite_1b_json[q6] ____________________________

q = {'expected_values': ['Hamid_Karzai'], 'question': 'For people who studied at "Indian_Institute_of_Science", what tag are they most interested in?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103bd28d0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103bd28d0>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'propertie..., 'to': 'Organisation', 'properties': []}, {'label': 'hasInterest', 'from': 'Person', 'to': 'Tag', 'properties': []}]}"
test_cases = [{'expected_values': ['Hamid_Karzai'], 'question': 'For people who studied at "Indian_Institute_of_Science", what tag are they most interested in?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Hamid_Karzai'} in result set() for question: For people who studied at "Indian_Institute_of_Science", what tag are they most interested in?
E             Cypher query: MATCH (p:Person)-[:studyAt]->(o:Organisation {name: 'Indian_Institute_of_Science'})-[:hasInterest]->(t:Tag) RETURN t.name AS interest ORDER BY COUNT(*) DESC LIMIT 1
E           assert {'Hamid_Karzai'} <= set()
E             
E             Extra items in the left set:
E             'Hamid_Karzai'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'properties': [{'name': 'name', 'type': 'STRING'}]}, {'label': 'Tag', 'properties': [{'name': 'ID', 'type': 'INT64'}, {'name': 'name', 'type': 'STRING'}]}], 'edges': [{'label': 'studyAt', 'from_': 'Person', 'to': 'Organisation', 'properties': []}, {'label': 'hasInterest', 'from_': 'Person', 'to': 'Tag', 'properties': []}]}
Error running query: Cannot evaluate expression with type AGGREGATE_FUNCTION.
____________________________ test_suite_1b_json[q7] ____________________________

q = {'expected_values': [20], 'question': 'How many people studying at "The_Oxford_Educational_Institutions" have an interest in the tag "William_Shakespeare"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103d14680>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q])

tests/test_text2cypher_json.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103d14680>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'propertie...[{'name': 'classYear', 'type': 'INT64'}]}, {'label': 'hasInterest', 'from': 'Person', 'to': 'Tag', 'properties': []}]}"
test_cases = [{'expected_values': [20], 'question': 'How many people studying at "The_Oxford_Educational_Institutions" have an interest in the tag "William_Shakespeare"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {20} in result {0} for question: How many people studying at "The_Oxford_Educational_Institutions" have an interest in the tag "William_Shakespeare"?
E             Cypher query: MATCH (p:Person)-[:studyAt]->(o:Organisation {name: 'The_Oxford_Educational_Institutions'})-[:hasInterest]->(t:Tag {name: 'William_Shakespeare'}) RETURN COUNT(p)
E           assert {20} <= {0}
E             
E             Extra items in the left set:
E             20

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'properties': [{'name': 'name', 'type': 'STRING'}]}, {'label': 'Tag', 'properties': [{'name': 'name', 'type': 'STRING'}]}], 'edges': [{'label': 'studyAt', 'from_': 'Person', 'to': 'Organisation', 'properties': [{'name': 'classYear', 'type': 'INT64'}]}, {'label': 'hasInterest', 'from_': 'Person', 'to': 'Tag', 'properties': []}]}
____________________________ test_suite_1c_json[q1] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Did anyone who works at "Linxair" create a comment that replied to a post?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103c6de20>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q], expected_boolean=True)

tests/test_text2cypher_json.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103c6de20>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'propertie...ent', 'to': 'Person', 'properties': []}, {'label': 'replyOfPost', 'from': 'Comment', 'to': 'Post', 'properties': []}]}"
test_cases = [{'expected_values': ['Yes'], 'question': 'Did anyone who works at "Linxair" create a comment that replied to a post?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Did anyone who works at "Linxair" create a comment that replied to a post?
E             Cypher query: MATCH (p:Person)-[:workAt]->(o:Organisation) WHERE toLower(o.name) CONTAINS 'linxair' MATCH (c:Comment)-[:commentHasCreator]->(p) WHERE (c)-[:replyOfPost]->(p) RETURN COUNT(c) > 0 AS result
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Organisation', 'properties': [{'name': 'name', 'type': 'STRING'}, {'name': 'ID', 'type': 'INT64'}]}, {'label': 'Comment', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Post', 'properties': [{'name': 'ID', 'type': 'INT64'}]}], 'edges': [{'label': 'workAt', 'from_': 'Person', 'to': 'Organisation', 'properties': []}, {'label': 'commentHasCreator', 'from_': 'Comment', 'to': 'Person', 'properties': []}, {'label': 'replyOfPost', 'from_': 'Comment', 'to': 'Post', 'properties': []}]}
____________________________ test_suite_1c_json[q2] ____________________________

q = {'expected_values': ['Yes'], 'question': "Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x103d2ec50>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q], expected_boolean=True)

tests/test_text2cypher_json.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103d2ec50>
schema = "{'nodes': [{'label': 'Person', 'properties': [{'name': 'lastName', 'type': 'STRING'}]}, {'label': 'Forum', 'propertie...'Forum', 'to': 'Person', 'properties': []}, {'label': 'forumHasTag', 'from': 'Forum', 'to': 'Tag', 'properties': []}]}"
test_cases = [{'expected_values': ['Yes'], 'question': "Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?"}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?
E             Cypher query: MATCH (p:Person)-[:hasModerator]->(f:Forum)-[:forumHasTag]->(t:Tag) WHERE toLower(p.lastName) CONTAINS 'gurung' AND toLower(t.name) CONTAINS 'norah_jones' RETURN COUNT(p) > 0 AS exists
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': [{'name': 'lastName', 'type': 'STRING'}]}, {'label': 'Forum', 'properties': []}, {'label': 'Tag', 'properties': [{'name': 'name', 'type': 'STRING'}]}], 'edges': [{'label': 'hasModerator', 'from_': 'Forum', 'to': 'Person', 'properties': []}, {'label': 'forumHasTag', 'from_': 'Forum', 'to': 'Tag', 'properties': []}]}
Error running query: Parser exception: mismatched input 'exists' expecting {ADD, ALTER, AS, ATTACH, BEGIN, BY, CALL, CHECKPOINT, COMMENT, COMMIT, CONTAINS, COPY, COUNT, CYCLE, DATABASE, DELETE, DETACH, DROP, EXPLAIN, EXPORT, EXTENSION, FROM, FORCE, GRAPH, IMPORT, IF, INCREMENT, IS, KEY, LIMIT, LOAD, LOGICAL, MATCH, MAXVALUE, MERGE, MINVALUE, NO, NODE, PROJECT, READ, REL, RENAME, RETURN, ROLLBACK, SEQUENCE, SET, START, STRUCT, TO, TRANSACTION, TYPE, UNINSTALL, UPDATE, USE, WRITE, YIELD, DECIMAL, L_SKIP, HexLetter, UnescapedSymbolicName, EscapedSymbolicName} (line: 1, offset: 178)
"MATCH (p:Person)-[:hasModerator]->(f:Forum)-[:forumHasTag]->(t:Tag) WHERE toLower(p.lastName) CONTAINS 'gurung' AND toLower(t.name) CONTAINS 'norah_jones' RETURN COUNT(p) > 0 AS exists"
                                                                                                                                                                                   ^^^^^^
____________________________ test_suite_1c_json[q4] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Are there any comments created by a person that reply to a post also created by the same person?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103d40750>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q], expected_boolean=True)

tests/test_text2cypher_json.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103d40750>
schema = "{'nodes': [{'label': 'Comment', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Person', 'properties': [...ent', 'to': 'Post', 'properties': []}, {'label': 'postHasCreator', 'from': 'Post', 'to': 'Person', 'properties': []}]}"
test_cases = [{'expected_values': ['Yes'], 'question': 'Are there any comments created by a person that reply to a post also created by the same person?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Are there any comments created by a person that reply to a post also created by the same person?
E             Cypher query: MATCH (c1:Comment)-[:commentHasCreator]->(p1:Person), (c1)-[:replyOfPost]->(post:Post)<-[:postHasCreator]-(p2:Person), (c2:Comment)-[:commentHasCreator]->(p2) WHERE p1.ID = p2.ID AND c1.ID <> c2.ID RETURN COUNT(*) > 0 AS exists
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Comment', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Person', 'properties': [{'name': 'ID', 'type': 'INT64'}]}, {'label': 'Post', 'properties': [{'name': 'ID', 'type': 'INT64'}]}], 'edges': [{'label': 'commentHasCreator', 'from_': 'Comment', 'to': 'Person', 'properties': []}, {'label': 'replyOfPost', 'from_': 'Comment', 'to': 'Post', 'properties': []}, {'label': 'postHasCreator', 'from_': 'Post', 'to': 'Person', 'properties': []}]}
Error running query: Parser exception: mismatched input 'exists' expecting {ADD, ALTER, AS, ATTACH, BEGIN, BY, CALL, CHECKPOINT, COMMENT, COMMIT, CONTAINS, COPY, COUNT, CYCLE, DATABASE, DELETE, DETACH, DROP, EXPLAIN, EXPORT, EXTENSION, FROM, FORCE, GRAPH, IMPORT, IF, INCREMENT, IS, KEY, LIMIT, LOAD, LOGICAL, MATCH, MAXVALUE, MERGE, MINVALUE, NO, NODE, PROJECT, READ, REL, RENAME, RETURN, ROLLBACK, SEQUENCE, SET, START, STRUCT, TO, TRANSACTION, TYPE, UNINSTALL, UPDATE, USE, WRITE, YIELD, DECIMAL, L_SKIP, HexLetter, UnescapedSymbolicName, EscapedSymbolicName} (line: 1, offset: 221)
"MATCH (c1:Comment)-[:commentHasCreator]->(p1:Person), (c1)-[:replyOfPost]->(post:Post)<-[:postHasCreator]-(p2:Person), (c2:Comment)-[:commentHasCreator]->(p2) WHERE p1.ID = p2.ID AND c1.ID <> c2.ID RETURN COUNT(*) > 0 AS exists"
                                                                                                                                                                                                                              ^^^^^^
____________________________ test_suite_1c_json[q8] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x103d1a810>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_json(q, db_manager):
        schema_pruned = prune_json_schema(db_manager, q["question"])
>       _run_test_suite(db_manager, str(schema_pruned), [q], expected_boolean=True)

tests/test_text2cypher_json.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x103d1a810>
schema = "{'nodes': [{'label': 'Person', 'properties': []}, {'label': 'Place', 'properties': [{'name': 'name', 'type': 'STRING'...': 'Person', 'to': 'Tag', 'properties': []}, {'label': 'hasType', 'from': 'Tag', 'to': 'Tagclass', 'properties': []}]}"
test_cases = [{'expected_values': ['Yes'], 'question': 'Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?
E             Cypher query: MATCH (p:Person)-[:personIsLocatedIn]->(m:Place {name: 'Manila'})-[:hasInterest]->(t:Tag)-[:hasType]->(tc:Tagclass {name: 'BritishRoyalty'}) RETURN COUNT(p) > 0
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_json.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
{'nodes': [{'label': 'Person', 'properties': []}, {'label': 'Place', 'properties': [{'name': 'name', 'type': 'STRING'}]}, {'label': 'Tag', 'properties': []}, {'label': 'Tagclass', 'properties': [{'name': 'name', 'type': 'STRING'}]}], 'edges': [{'label': 'personIsLocatedIn', 'from_': 'Person', 'to': 'Place', 'properties': []}, {'label': 'hasInterest', 'from_': 'Person', 'to': 'Tag', 'properties': []}, {'label': 'hasType', 'from_': 'Tag', 'to': 'Tagclass', 'properties': []}]}
=========================== short test summary info ============================
FAILED tests/test_text2cypher_json.py::test_suite_1a_json[q6] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1a_json[q7] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1b_json[q2] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1b_json[q4] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1b_json[q6] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1b_json[q7] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1c_json[q1] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1c_json[q2] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1c_json[q4] - AssertionErro...
FAILED tests/test_text2cypher_json.py::test_suite_1c_json[q8] - AssertionErro...
================== 10 failed, 20 passed in 147.31s (0:02:27) ===================

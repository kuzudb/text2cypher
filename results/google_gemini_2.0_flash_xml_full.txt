============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/prrao/code/text2cypher
configfile: pyproject.toml
collected 30 items

tests/test_text2cypher_xml_full.py ......F.....F.F...........F...        [100%]

=================================== FAILURES ===================================
____________________________ test_suite_1a_xml[q6] _____________________________

q = {'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x101fbd6a0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x101fbd6a0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'India'} in result set() for question: What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?
E             Cypher query: MATCH (p:Person {ID: 17592186048023})-[r:commentHasCreator]->(c:Comment)-[r2:replyOfPost]->(po:Post)-[r3:postHasTag]->(t:Tag) WHERE toLower(t.name) CONTAINS toLower('Jamaica') MATCH (c)-[r4:commentIsLocatedIn]->(pl:Place) RETURN pl.name
E           assert {'India'} <= set()
E             
E             Extra items in the left set:
E             'India'

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1b_xml[q2] _____________________________

q = {'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102099390>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102099390>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {2293} in result {0} for question: What is the total number of persons who liked comments created by "Rafael Alonso"?
E             Cypher query: MATCH (p1:Person)-[r1:commentHasCreator]->(c1:Comment)<-[r2:likeComment]-(p2:Person) WHERE toLower(p1.firstName) CONTAINS toLower('Rafael') AND toLower(p1.lastName) CONTAINS toLower('Alonso') RETURN count(DISTINCT p2)
E           assert {2293} <= {0}
E             
E             Extra items in the left set:
E             2293

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1b_xml[q4] _____________________________

q = {'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}
db_manager = <utils.KuzuDatabaseManager object at 0x102091160>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102091160>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {278} in result {0} for question: What is the total number of forums moderated by employees of "Air_Tanzania"?.
E             Cypher query: MATCH (o1:Organisation)<-[r1:workAt]-(p1:Person)-[r2:hasModerator]->(f1:Forum) WHERE toLower(o1.name) CONTAINS "air_tanzania" RETURN count(DISTINCT f1)
E           assert {278} <= {0}
E             
E             Extra items in the left set:
E             278

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1c_xml[q6] _____________________________

q = {'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}
db_manager = <utils.KuzuDatabaseManager object at 0x10207e5d0>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q], expected_boolean=True)

tests/test_text2cypher_xml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10207e5d0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Are there any forums with the tag that person ID 10995116287854 is a member of?
E             Cypher query: MATCH (p1:Person)-[r1:hasMember]->(f1:Forum)-[r2:forumHasTag]->(t1:Tag) WHERE p1.ID = 10995116287854 RETURN f1.ID
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_xml_full.py:51: AssertionError
=========================== short test summary info ============================
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q6] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1b_xml[q2] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1b_xml[q4] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1c_xml[q6] - AssertionE...
======================== 4 failed, 26 passed in 44.68s =========================

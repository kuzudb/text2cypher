============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/prrao/code/text2cypher
configfile: pyproject.toml
collected 30 items

tests/test_text2cypher_yaml_full.py ..F.F.FF.FFFFFF.F...F.F.F.F.F.       [100%]

=================================== FAILURES ===================================
____________________________ test_suite_1a_yaml[q2] ____________________________

q = {'expected_values': ['Mads', 'Haugland', 'Norwegian_School_of_Sport_Sciences'], 'question': 'What is the first/last name of the person who created post ID 962077547172, and where did they study?'}
db_manager = <utils.KuzuDatabaseManager object at 0x101ab2fd0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x101ab2fd0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Mads', 'Haugland', 'Norwegian_School_of_Sport_Sciences'], 'question': 'What is the first/last name of the person who created post ID 962077547172, and where did they study?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Mads', 'Norwegian_School_of_Sport_Sciences', 'Haugland'} in result set() for question: What is the first/last name of the person who created post ID 962077547172, and where did they study?
E             Cypher query: MATCH (p:Post {ID: 962077547172})<-[:postHasCreator]-(creator:Person)-[:studyAt]->(org:Organisation) RETURN creator.firstName, creator.lastName, org.name
E           assert {'Haugland', ...ort_Sciences'} <= set()
E             
E             Extra items in the left set:
E             'Mads'
E             'Norwegian_School_of_Sport_Sciences'
E             'Haugland'

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1a_yaml[q4] ____________________________

q = {'expected_values': ['Akihiko'], 'question': 'What are the first names of persons with the last name "Choi" who are members of forums whose title contains "John Brown"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x10206cb00>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10206cb00>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Akihiko'], 'question': 'What are the first names of persons with the last name "Choi" who are members of forums whose title contains "John Brown"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Akihiko'} in result set() for question: What are the first names of persons with the last name "Choi" who are members of forums whose title contains "John Brown"?
E             Cypher query: MATCH (p:Person)-[:hasMember]->(f:Forum) WHERE toLower(p.lastName) CONTAINS 'choi' AND toLower(f.title) CONTAINS 'john brown' RETURN p.firstName
E           assert {'Akihiko'} <= set()
E             
E             Extra items in the left set:
E             'Akihiko'

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1a_yaml[q6] ____________________________

q = {'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x101ff96a0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x101ff96a0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'India'} in result set() for question: What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?
E             Cypher query: MATCH (p:Person)-[:commentHasCreator]->(c:Comment)-[:replyOfComment]->(parentComment:Comment)-[:replyOfPost]->(post:Post)<-[:containerOf]-(forum:Forum)-[:forumHasTag]->(tag:Tag)<-[:postHasTag]-(post) WHERE p.ID = 17592186048023 AND LOWER(tag.name) CONTAINS 'jamaica' AND EXISTS((p)-[:personIsLocatedIn]->(place:Place))-[:commentIsLocatedIn]->(c)-[:commentIsLocatedIn]->(place) RETURN DISTINCT place.name
E           assert {'India'} <= set()
E             
E             Extra items in the left set:
E             'India'

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Parser exception: Invalid input <MATCH (p:Person)-[:commentHasCreator]->(c:Comment)-[:replyOfComment]->(parentComment:Comment)-[:replyOfPost]->(post:Post)<-[:containerOf]-(forum:Forum)-[:forumHasTag]->(tag:Tag)<-[:postHasTag]-(post) WHERE p.ID = 17592186048023 AND LOWER(tag.name) CONTAINS 'jamaica' AND EXISTS(>: expected rule oC_SingleQuery (line: 1, offset: 277)
"MATCH (p:Person)-[:commentHasCreator]->(c:Comment)-[:replyOfComment]->(parentComment:Comment)-[:replyOfPost]->(post:Post)<-[:containerOf]-(forum:Forum)-[:forumHasTag]->(tag:Tag)<-[:postHasTag]-(post) WHERE p.ID = 17592186048023 AND LOWER(tag.name) CONTAINS 'jamaica' AND EXISTS((p)-[:personIsLocatedIn]->(place:Place))-[:commentIsLocatedIn]->(c)-[:commentIsLocatedIn]->(place) RETURN DISTINCT place.name"
                                                                                                                                                                                                                                                                                      ^
____________________________ test_suite_1a_yaml[q7] ____________________________

q = {'expected_values': [13194139534410], 'question': 'What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x101ff97b0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x101ff97b0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': [13194139534410], 'question': 'What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {13194139534410} in result set() for question: What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?
E             Cypher query: MATCH (p:Person)-[:hasModerator]->(f:Forum)-[:forumHasTag]->(t:Tag) WHERE toLower(t.name) CONTAINS 'emilio fernandez' AND p.birthday > date('1990-01-01') RETURN DISTINCT p.ID
E           assert {13194139534410} <= set()
E             
E             Extra items in the left set:
E             13194139534410

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1a_yaml[q9] ____________________________

q = {'expected_values': [24189255819727, 8796093029267], 'question': 'What are the unique IDs of persons who commented on posts that have the tag "Cate_Blanchett"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x10212c350>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10212c350>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': [24189255819727, 8796093029267], 'question': 'What are the unique IDs of persons who commented on posts that have the tag "Cate_Blanchett"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {8796093029267, 24189255819727} in result set() for question: What are the unique IDs of persons who commented on posts that have the tag "Cate_Blanchett"?
E             Cypher query: MATCH (p:Person)-[:commentHasCreator]->(c:Comment)-[:replyOfComment]->(c2:Comment)-[:commentHasTag]->(t:Tag) WHERE toLower(t.name) CONTAINS 'cate_blanchett' RETURN DISTINCT p.ID
E           assert {879609302926...4189255819727} <= set()
E             
E             Extra items in the left set:
E             8796093029267
E             24189255819727

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1b_yaml[q0] ____________________________

q = {'expected_values': ['MDLR_Airlines', 190], 'question': 'Which organization NOT of the type "university" has the most employees, and how many employees do they have?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020b65d0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020b65d0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['MDLR_Airlines', 190], 'question': 'Which organization NOT of the type "university" has the most employees, and how many employees do they have?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {190, 'MDLR_Airlines'} in result set() for question: Which organization NOT of the type "university" has the most employees, and how many employees do they have?
E             Cypher query: MATCH (org:Organisation) WHERE toLower(org.type) CONTAINS 'university' WITH org, size((:workAt)-[:workAt]->(org)) AS employeeCount WHERE employeeCount >= ALL (MATCH (otherOrg:Organisation) WHERE toLower(otherOrg.type) CONTAINS 'university' RETURN size((:workAt)-[:workAt]->(otherOrg))) RETURN org.name, employeeCount
E           assert {190, 'MDLR_Airlines'} <= set()
E             
E             Extra items in the left set:
E             190
E             'MDLR_Airlines'

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Parser exception: Invalid input <employeeCount >= ALL (MATCH (>: expected rule oC_ComparisonExpression (line: 1, offset: 165)
"MATCH (org:Organisation) WHERE toLower(org.type) CONTAINS 'university' WITH org, size((:workAt)-[:workAt]->(org)) AS employeeCount WHERE employeeCount >= ALL (MATCH (otherOrg:Organisation) WHERE toLower(otherOrg.type) CONTAINS 'university' RETURN size((:workAt)-[:workAt]->(otherOrg))) RETURN org.name, employeeCount"
                                                                                                                                                                      ^
____________________________ test_suite_1b_yaml[q1] ____________________________

q = {'expected_values': [3229], 'question': 'Count the total number of comments (whose content is not null) created by people living in "Berlin".'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020b56d0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020b56d0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': [3229], 'question': 'Count the total number of comments (whose content is not null) created by people living in "Berlin".'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {3229} in result {0} for question: Count the total number of comments (whose content is not null) created by people living in "Berlin".
E             Cypher query: MATCH (p:Person)-[:personIsLocatedIn]->(l:Place {name: 'Berlin'})<-[:personIsLocatedIn]-(creator:Person)-[:commentHasCreator]->(c:Comment) WHERE c.content IS NOT NULL RETURN count(c)
E           assert {3229} <= {0}
E             
E             Extra items in the left set:
E             3229

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1b_yaml[q2] ____________________________

q = {'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020d6430>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020d6430>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': [2293], 'question': 'What is the total number of persons who liked comments created by "Rafael Alonso"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {2293} in result {0} for question: What is the total number of persons who liked comments created by "Rafael Alonso"?
E             Cypher query: MATCH (c:Comment)-[:commentHasCreator]->(creator:Person {firstName: 'Rafael', lastName: 'Alonso'})<-[:likeComment]-(liker:Person) RETURN COUNT(DISTINCT liker)
E           assert {2293} <= {0}
E             
E             Extra items in the left set:
E             2293

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1b_yaml[q3] ____________________________

q = {'expected_values': [37], 'question': 'How many forums are there with tags belonging to the "Athlete" tagclass?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102111470>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102111470>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': [37], 'question': 'How many forums are there with tags belonging to the "Athlete" tagclass?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {37} in result set() for question: How many forums are there with tags belonging to the "Athlete" tagclass?
E             Cypher query: MATCH (f:Forum)-[:forumHasTag]->(t:Tag) WHERE (t)-[:hasType]->(tc:Tagclass) AND toLower(tc.name) CONTAINS 'athlete' RETURN count(DISTINCT f)
E           assert {37} <= set()
E             
E             Extra items in the left set:
E             37

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Binder exception: Variable tc is not in scope.
____________________________ test_suite_1b_yaml[q4] ____________________________

q = {'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}
db_manager = <utils.KuzuDatabaseManager object at 0x10202bee0>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10202bee0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {278} in result {0} for question: What is the total number of forums moderated by employees of "Air_Tanzania"?.
E             Cypher query: MATCH (org:Organisation)-[:workAt]->(p:Person)-[:hasModerator]->(f:Forum) WHERE toLower(org.name) CONTAINS 'air_tanzania' RETURN count(DISTINCT f)
E           assert {278} <= {0}
E             
E             Extra items in the left set:
E             278

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1b_yaml[q6] ____________________________

q = {'expected_values': ['Hamid_Karzai'], 'question': 'For people who studied at "Indian_Institute_of_Science", what tag are they most interested in?'}
db_manager = <utils.KuzuDatabaseManager object at 0x101f66b10>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q])

tests/test_text2cypher_yaml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x101f66b10>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Hamid_Karzai'], 'question': 'For people who studied at "Indian_Institute_of_Science", what tag are they most interested in?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Hamid_Karzai'} in result set() for question: For people who studied at "Indian_Institute_of_Science", what tag are they most interested in?
E             Cypher query: MATCH (p:Person)-[:studyAt]->(org:Organisation) WHERE toLower(org.name) CONTAINS 'indian_institute_of_science' MATCH (p)-[:hasInterest]->(tag:Tag) RETURN tag.name ORDER BY COUNT(*) DESC LIMIT 1
E           assert {'Hamid_Karzai'} <= set()
E             
E             Extra items in the left set:
E             'Hamid_Karzai'

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Cannot evaluate expression with type AGGREGATE_FUNCTION.
____________________________ test_suite_1c_yaml[q0] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Has the person named "Bill Moore" liked the post with ID 1649268446863?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020fd630>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q], expected_boolean=True)

tests/test_text2cypher_yaml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020fd630>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Yes'], 'question': 'Has the person named "Bill Moore" liked the post with ID 1649268446863?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Has the person named "Bill Moore" liked the post with ID 1649268446863?
E             Cypher query: MATCH (p:Person)-[:likePost]->(post:Post) WHERE toLower(p.firstName) + ' ' + toLower(p.lastName) CONTAINS 'bill moore' AND post.ID = 1649268446863 RETURN count(*) > 0
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Binder exception: Cannot match a built-in function for given function +(STRING,BOOL). Supported inputs are
(INT128,INT128) -> INT128
(INT64,INT64) -> INT64
(INT32,INT32) -> INT32
(INT16,INT16) -> INT16
(INT8,INT8) -> INT8
(SERIAL,SERIAL) -> SERIAL
(UINT64,UINT64) -> UINT64
(UINT32,UINT32) -> UINT32
(UINT16,UINT16) -> UINT16
(UINT8,UINT8) -> UINT8
(DOUBLE,DOUBLE) -> DOUBLE
(FLOAT,FLOAT) -> FLOAT
(DECIMAL,DECIMAL) -> DECIMAL
(LIST,LIST) -> LIST
(STRING,STRING) -> STRING
(INTERVAL,INTERVAL) -> INTERVAL
(DATE,INT64) -> DATE
(INT64,DATE) -> DATE
(DATE,INTERVAL) -> DATE
(INTERVAL,DATE) -> DATE
(TIMESTAMP,INTERVAL) -> TIMESTAMP
(INTERVAL,TIMESTAMP) -> TIMESTAMP

____________________________ test_suite_1c_yaml[q2] ____________________________

q = {'expected_values': ['Yes'], 'question': "Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x1020bd150>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q], expected_boolean=True)

tests/test_text2cypher_yaml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020bd150>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Yes'], 'question': "Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?"}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?
E             Cypher query: MATCH (p:Person)-[:hasMember]->(f:Forum)-[:forumHasTag]->(t:Tag) WHERE toLower(p.lastName) CONTAINS 'gurung' AND toLower(t.name) CONTAINS 'norah_jones' RETURN COUNT(p) > 0 AS exists
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Parser exception: mismatched input 'exists' expecting {ADD, ALTER, AS, ATTACH, BEGIN, BY, CALL, CHECKPOINT, COMMENT, COMMIT, CONTAINS, COPY, COUNT, CYCLE, DATABASE, DELETE, DETACH, DROP, EXPLAIN, EXPORT, EXTENSION, FROM, FORCE, GRAPH, IMPORT, IF, INCREMENT, IS, KEY, LIMIT, LOAD, LOGICAL, MATCH, MAXVALUE, MERGE, MINVALUE, NO, NODE, PROJECT, READ, REL, RENAME, RETURN, ROLLBACK, SEQUENCE, SET, START, STRUCT, TO, TRANSACTION, TYPE, UNINSTALL, UPDATE, USE, WRITE, YIELD, DECIMAL, L_SKIP, HexLetter, UnescapedSymbolicName, EscapedSymbolicName} (line: 1, offset: 175)
"MATCH (p:Person)-[:hasMember]->(f:Forum)-[:forumHasTag]->(t:Tag) WHERE toLower(p.lastName) CONTAINS 'gurung' AND toLower(t.name) CONTAINS 'norah_jones' RETURN COUNT(p) > 0 AS exists"
                                                                                                                                                                                ^^^^^^
____________________________ test_suite_1c_yaml[q4] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Are there any comments created by a person that reply to a post also created by the same person?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020cb5b0>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q], expected_boolean=True)

tests/test_text2cypher_yaml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020cb5b0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Yes'], 'question': 'Are there any comments created by a person that reply to a post also created by the same person?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Are there any comments created by a person that reply to a post also created by the same person?
E             Cypher query: MATCH (c1:Comment)-[:replyOfComment]->(c2:Comment)-[:commentHasCreator]->(p:Person), (c2)-[:replyOfComment]->(p), (c1)-[:commentHasCreator]->(p) WHERE (c1)-[:commentHasCreator]->(p) AND (c2)-[:commentHasCreator]->(p) RETURN DISTINCT p
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_yaml_full.py:51: AssertionError
____________________________ test_suite_1c_yaml[q6] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102142ed0>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q], expected_boolean=True)

tests/test_text2cypher_yaml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102142ed0>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Are there any forums with the tag that person ID 10995116287854 is a member of?
E             Cypher query: MATCH (p:Person)-[:hasMember]->(f:Forum) WHERE p.ID = 10995116287854 RETURN DISTINCT f.name
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_yaml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Binder exception: Cannot find property name for f.
____________________________ test_suite_1c_yaml[q8] ____________________________

q = {'expected_values': ['Yes'], 'question': 'Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102142810>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_yaml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_yaml = db_manager.get_schema_yaml(schema)
>       _run_test_suite(db_manager, schema_yaml, [q], expected_boolean=True)

tests/test_text2cypher_yaml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102142810>
schema = 'structure:\n  - label: workAt\n    from: Person\n    to: Organisation\n  - label: forumHasTag\n    from: Forum\n    t...:\n      - name: joinDate\n        type: TIMESTAMP\n  - label: replyOfPost\n  - label: hasType\n  - label: hasInterest'
test_cases = [{'expected_values': ['Yes'], 'question': 'Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add( binary_answer)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?
E             Cypher query: MATCH (p:Person)-[:personIsLocatedIn]->(m:Place {name: 'Manila'})-[:personIsLocatedIn]->(p2:Person), (p2)-[:hasInterest]->(t:Tag)-[:hasType]->(tc:Tagclass {name: 'BritishRoyalty'}) RETURN COUNT(DISTINCT p) > 0
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_yaml_full.py:51: AssertionError
=========================== short test summary info ============================
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1a_yaml[q2] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1a_yaml[q4] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1a_yaml[q6] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1a_yaml[q7] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1a_yaml[q9] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1b_yaml[q0] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1b_yaml[q1] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1b_yaml[q2] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1b_yaml[q3] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1b_yaml[q4] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1b_yaml[q6] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1c_yaml[q0] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1c_yaml[q2] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1c_yaml[q4] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1c_yaml[q6] - Assertio...
FAILED tests/test_text2cypher_yaml_full.py::test_suite_1c_yaml[q8] - Assertio...
======================== 16 failed, 14 passed in 53.90s ========================

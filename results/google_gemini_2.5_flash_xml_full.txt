============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/prrao/code/text2cypher
configfile: pyproject.toml
collected 30 items

tests/test_text2cypher_xml_full.py ...FF.FF.F....F.......F...F.F.        [100%]

=================================== FAILURES ===================================
____________________________ test_suite_1a_xml[q3] _____________________________

q = {'expected_values': [1924145496676], 'question': "Give me the IDs of comments created by 'Alfredo Gomez' with a size greater than 100"}
db_manager = <utils.KuzuDatabaseManager object at 0x102080fc0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102080fc0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [1924145496676], 'question': "Give me the IDs of comments created by 'Alfredo Gomez' with a size greater than 100"}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {1924145496676} in result set() for question: Give me the IDs of comments created by 'Alfredo Gomez' with a size greater than 100
E             Cypher query: MATCH (a1:Comment)<-[r1:commentHasCreator]-(a2:Person) WHERE toLower(a2.firstName) CONTAINS toLower('Alfredo') AND toLower(a2.lastName) CONTAINS toLower('Gomez') AND a1.length > 100 RETURN a1.ID
E           assert {1924145496676} <= set()
E             
E             Extra items in the left set:
E             1924145496676

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1a_xml[q4] _____________________________

q = {'expected_values': ['Akihiko'], 'question': 'What are the first names of persons with the last name "Choi" who are members of forums whose title contains "John Brown"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102081220>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102081220>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Akihiko'], 'question': 'What are the first names of persons with the last name "Choi" who are members of forums whose title contains "John Brown"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Akihiko'} in result set() for question: What are the first names of persons with the last name "Choi" who are members of forums whose title contains "John Brown"?
E             Cypher query: MATCH (p1:Person)-[:hasMember]->(f1:Forum) WHERE toLower(p1.lastName) = 'choi' AND toLower(f1.title) CONTAINS 'john brown' RETURN p1.firstName
E           assert {'Akihiko'} <= set()
E             
E             Extra items in the left set:
E             'Akihiko'

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1a_xml[q6] _____________________________

q = {'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x10200d6a0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10200d6a0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['India'], 'question': "What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?"}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'India'} in result set() for question: What are the names of places from where the person ID 17592186048023 made comments that replied to posts tagged with 'Jamaica'?
E             Cypher query: MATCH (p1:Person {ID: 17592186048023})-[:commentHasCreator]->(c1:Comment)-[:replyOfPost]->(p2:Post)-[:postHasTag]->(t1:Tag) WHERE toLower(t1.name) CONTAINS toLower('Jamaica') OPTIONAL MATCH (c1)-[:commentIsLocatedIn]->(pl1:Place) RETURN DISTINCT pl1.name
E           assert {'India'} <= set()
E             
E             Extra items in the left set:
E             'India'

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1a_xml[q7] _____________________________

q = {'expected_values': [13194139534410], 'question': 'What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x10200d7b0>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x10200d7b0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [13194139534410], 'question': 'What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {13194139534410} in result set() for question: What are the distinct IDs of persons born after 1 January 1990 who are moderators of Forums containing the term "Emilio Fernandez"?
E             Cypher query: MATCH (p1:Person)-[:hasModerator]->(f1:Forum) WHERE p1.birthday > date('1990-01-01') AND toLower(f1.title) CONTAINS toLower('Emilio Fernandez') RETURN DISTINCT p1.ID
E           assert {13194139534410} <= set()
E             
E             Extra items in the left set:
E             13194139534410

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1a_xml[q9] _____________________________

q = {'expected_values': [24189255819727, 8796093029267], 'question': 'What are the unique IDs of persons who commented on posts that have the tag "Cate_Blanchett"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x102144250>

    @pytest.mark.parametrize("q", suite_1a)
    def test_suite_1a_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102144250>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [24189255819727, 8796093029267], 'question': 'What are the unique IDs of persons who commented on posts that have the tag "Cate_Blanchett"?'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {8796093029267, 24189255819727} in result set() for question: What are the unique IDs of persons who commented on posts that have the tag "Cate_Blanchett"?
E             Cypher query: MATCH (t1:Tag)<-[r1:postHasTag]-(p1:Post)<-[r2:replyOfPost]-(c1:Comment)<-[r3:commentHasCreator]-(p2:Person) WHERE toLower(t1.name) CONTAINS toLower('Cate_Blanchett') RETURN DISTINCT p2.ID
E           assert {879609302926...4189255819727} <= set()
E             
E             Extra items in the left set:
E             8796093029267
E             24189255819727

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1b_xml[q4] _____________________________

q = {'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020de750>

    @pytest.mark.parametrize("q", suite_1b)
    def test_suite_1b_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q])

tests/test_text2cypher_xml_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020de750>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': [278], 'question': 'What is the total number of forums moderated by employees of "Air_Tanzania"?.'}]
expected_boolean = False

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {278} in result {0} for question: What is the total number of forums moderated by employees of "Air_Tanzania"?.
E             Cypher query: MATCH (a1:Organisation)<-[r1:workAt]-(a2:Person)-[r2:hasModerator]->(a3:Forum) WHERE toLower(a1.name) CONTAINS toLower('Air_Tanzania') RETURN count(a3)
E           assert {278} <= {0}
E             
E             Extra items in the left set:
E             278

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1c_xml[q2] _____________________________

q = {'expected_values': ['Yes'], 'question': "Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?"}
db_manager = <utils.KuzuDatabaseManager object at 0x102129d50>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q], expected_boolean=True)

tests/test_text2cypher_xml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x102129d50>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Yes'], 'question': "Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?"}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Is there a person with the last name 'Gurung' who's a moderator of a forum with the tag 'Norah_Jones'?
E             Cypher query: MATCH (p1:Person)-[:hasModerator]->(f1:Forum)-[:forumHasTag]->(t1:Tag) WHERE toLower(p1.lastName) CONTAINS toLower('Gurung') AND toLower(t1.name) CONTAINS toLower('Norah_Jones') RETURN p1.firstName
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1c_xml[q6] _____________________________

q = {'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020cb8f0>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q], expected_boolean=True)

tests/test_text2cypher_xml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020cb8f0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Yes'], 'question': 'Are there any forums with the tag that person ID 10995116287854 is a member of?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Are there any forums with the tag that person ID 10995116287854 is a member of?
E             Cypher query: MATCH (p1:Person)-[:hasMember]->(f1:Forum)-[:forumHasTag]->(t1:Tag) WHERE p1.ID = 10995116287854 RETURN DISTINCT f1.title
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_xml_full.py:51: AssertionError
____________________________ test_suite_1c_xml[q8] _____________________________

q = {'expected_values': ['Yes'], 'question': 'Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?'}
db_manager = <utils.KuzuDatabaseManager object at 0x1020cbcb0>

    @pytest.mark.parametrize("q", suite_1c)
    def test_suite_1c_xml(q, db_manager):
        schema = db_manager.get_schema_dict
        schema_xml = db_manager.get_schema_xml(schema)
>       _run_test_suite(db_manager, schema_xml, [q], expected_boolean=True)

tests/test_text2cypher_xml_full.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

db_manager = <utils.KuzuDatabaseManager object at 0x1020cbcb0>
schema = '<structure>\n  <rel label="workAt" from="Person" to="Organisation" />\n  <rel label="forumHasTag" from="Forum" to="Ta...>\n  </rel>\n  <rel label="replyOfPost" />\n  <rel label="hasType" />\n  <rel label="hasInterest" />\n</relationships>'
test_cases = [{'expected_values': ['Yes'], 'question': 'Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?'}]
expected_boolean = True

    def _run_test_suite(db_manager, schema, test_cases, expected_boolean=False):
        for q in test_cases:
            query, results = run_query(db_manager, schema, q["question"])
            expected = set(q["expected_values"])
            found = set()
            if expected_boolean:
                # Run binary answer question prompt on the results
                binary_answer = b.AnswerQuestionBinary(q["question"], str(results))
                found.add(binary_answer.value)
            else:
                if results is not None:
                    for v in results:
                        if isinstance(v, list):
                            found.update(v)
                        else:
                            found.add(v)
>           assert (
                expected <= found
            ), (
                f"Expected all of {expected} in result {found} for question: {q['question']}\n"
                f"Cypher query: {query}"
            )
E           AssertionError: Expected all of {'Yes'} in result {'No'} for question: Is it true that there are people located in Manila who are interested in a tag that belongs to the type "BritishRoyalty"?
E             Cypher query: MATCH (a1:Person)-[:personIsLocatedIn]->(a2:Place), (a1)-[:hasInterest]->(a3:Tag)-[:hasType]->(a4:Tagclass) WHERE toLower(a2.name) CONTAINS toLower('Manila') AND toLower(a4.name) CONTAINS toLower('BritishRoyalty') RETURN EXISTS { (a1)-[:personIsLocatedIn]->(a2) AND (a1)-[:hasInterest]->(a3) AND (a3)-[:hasType]->(a4) }
E           assert {'Yes'} <= {'No'}
E             
E             Extra items in the left set:
E             'Yes'

tests/test_text2cypher_xml_full.py:51: AssertionError
----------------------------- Captured stdout call -----------------------------
Error running query: Parser exception: Invalid input <EXISTS { (>: expected rule oC_ProjectionItem (line: 1, offset: 230)
"MATCH (a1:Person)-[:personIsLocatedIn]->(a2:Place), (a1)-[:hasInterest]->(a3:Tag)-[:hasType]->(a4:Tagclass) WHERE toLower(a2.name) CONTAINS toLower('Manila') AND toLower(a4.name) CONTAINS toLower('BritishRoyalty') RETURN EXISTS { (a1)-[:personIsLocatedIn]->(a2) AND (a1)-[:hasInterest]->(a3) AND (a3)-[:hasType]->(a4) }"
                                                                                                                                                                                                                                       ^
=========================== short test summary info ============================
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q3] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q4] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q6] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q7] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1a_xml[q9] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1b_xml[q4] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1c_xml[q2] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1c_xml[q6] - AssertionE...
FAILED tests/test_text2cypher_xml_full.py::test_suite_1c_xml[q8] - AssertionE...
======================== 9 failed, 21 passed in 45.72s =========================
